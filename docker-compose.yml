services:

  task-server:
      build: ./task-server
      container_name: task-server
      restart: unless-stopped
      ports:
        - "8080:8080"
      depends_on:
        - redis-node-0  # Ensure Redis starts before task-server
      environment:
        - REDIS_PASSWORD=your-secure-password
        - REDIS_URL=redis://default:your-secure-password@redis-node-0:6379
      networks:
        - redis-net
      # volumes:
      #   - ./task-server:/usr/src/app  # Mount local files for live reload
      #   - /usr/src/app/node_modules  # Avoid overwriting node_modules
      healthcheck:
        test: ["CMD-SHELL", "curl --fail http://localhost:8080/health || exit 1"] # Example health check, replace with your app's health endpoint
        interval: 10s
        timeout: 20s
        retries: 5
        start_period: 30s # Give the app some time to start        
  redis-node-0:
    image: bitnami/redis:latest
    container_name: redis-node-0 
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=your-secure-password
      - ALLOW_EMPTY_PASSWORD=no
      - NODE_ENV=development
    networks:
      - redis-net
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"] # Simple Redis ping
      interval: 5s
      timeout: 10s
      retries: 5
    volumes:
      - redis_data_0:/data
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - redis-net
    depends_on:
      task-server:
        condition: service_healthy
      redis-node-0:
        condition: service_healthy
    environment:
      - NEXT_PUBLIC_API_URL=http://task-server:8080/api
      - NODE_ENV=development
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:3000/healthcheck || exit 1"]
      interval: 10s
      timeout: 20s
      retries: 5
      start_period: 30s
    


networks:
  redis-net:
    driver: bridge

volumes:
  redis_data_0:
 